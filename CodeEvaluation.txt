Code Evaluation

Action Items:

1) Create a README that explains the following things:
	A) Installation of the project. 
		1) One of the first things I noticed when opening the solution was that I needed to have SQL Server 2012 installed. Ideally, a README would explain this dependency ahead of time, in addition to any other dependencies that I would need to install.
		2) The Nunit Test Adapter dependency needed to be installed to run unit tests
		3) Note: in order to run unit tests I had to install Nunit3TestAdapter plugin and I had to resolve the missing System.Web.Helpers reference
			a) I upgraded NUnit to v3 from v2 in order to be able to run unit tests with Nunit3TestAdapter plugin
			b) Note that NUnit3TestAdapter should be compatible with Visual Studio 2015.
	B) How to use the website
		1) I would give a more detailed breakdown of how you can use the website as a buyer or seller. Maybe talk more about each role's perpsective of the website (i.e. which pages they can view and interact with).
	C) Project structure
		1) A detailed breakdown of the structure of the project.

2) Suggested code changes:
	A) I would create a base model class, perhaps called EntityModel, that all models can inherit from. 
		1) This class would have common properties that all models use, such as CreatedAt and UpdatedAt.
	B) I would suggest that you do not show the Make Appointment and Make Offer buttons on the Properties page for sellers, only for buyers. I would need to learn more about the business requirements though before making this change.
	C) I would suggest perhaps modifying the commands, command handlers, and view model builders in the architecture at this point, unless future business requirements would lend themselves to this architecture. I think there could modifications to reduce the overhead of writing code to meet business requirements, while keeping the code extensible as it grows. I would discuss this architecture change with the team and put our heads together to figure out what's the best course forward before making any changes. If the application has been built with this architecture already and is ready to go live soon, then I would not make any big architecture changes at this point, and keep the existing architecture. One reason I might consider modifying the architecture is that I think the amount of overhead introduced by this current architecture outweighs the orginizational and extensibility benefit at this point - every time you want to code for a new business requirement you have to create a handful of classes. Perhaps I would keep the commands but remove the command handlers - ideally I would see how this architecture scaled up a little more. I do like how extensibile the code is though - it definitely is "Open for Extension, closed for modification." There isn't one giant service that keeps getting modified with new code to satisfy business requirements, which is definitely a good thing. I would like to stress that big architecture changes need to be discussed as a team and I need to learn more about the business requirements before I can definitely say which architecture I would suggest long term. 
	E) I would use a Unit Testing mocking framework for unit tests that needed mocking.
	F) I would consider setting up a Single Page Application to handle client side logic, and to improve application performance in the future, especially when there will be potentially many users.
	G) I would consider not using the built in .NET users/roles tables but creating my own to house everything in one database that is not local but hosted remotely (perhaps on Azure).

3) Things I like about the code
	A) I like how modular the code it is - whoever set it up seems to have a lot of experience with coding and thinking about architectures.
	B) I like how Entity Framework Code First is being used.
	C) I like how unit testing is being done already.
