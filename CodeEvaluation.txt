Code Evaluation

Action Items:

1) Create a README that explains the following things:
	A) Installation of the project. 
		1) One of the first things I noticed when opening the solution was that I needed to have SQL Server 2012 installed. Ideally, a README would explain this dependency ahead of time, in addition to any other dependencies that I would need to install.
		2) The Nunit Test Adapter dependency needed to be installed to run unit tests
		3) Note: in order to run unit tests I had to install Nunit3TestAdapter plugin and I had to resolve the missing System.Web.Helpers reference
			a) I upgraded NUnit to v3 from v2 in order to be able to run unit tests with Nunit3TestAdapter plugin
			b) Note that NUnit3TestAdapter should be compatible with Visual Studio 2015.
	B) How to use the website
		1) I would give a more detailed breakdown of how you can use the website as a buyer or seller. Maybe talk more about each role's perpsective of the website (i.e. which pages they can view and interact with).
	C) Project structure
		1) A detailed breakdown of the structure of the project.

2) Suggested code changes:
	A) I would create a base model class, perhaps called EntityModel, that all models can inherit from. 
		1) This class would have common properties that all models use, such as CreatedAt and UpdatedAt.
	B) I would suggest that you do not show the Make Appointment and Make Offer buttons on the Properties page for sellers, only for buyers. I would need to learn more about the business requirements though before making this change.
	C) I would suggest not having commands, command handlers, and view model builders in the architecture. Although the code is a bit more organized like this to a certain degree, I personally believe that the amount of overhead introduced by this architecture outweighs the orginizational benefit at this point - every time you want to add a new view model or business requirement you have to create a handful of classes. Here are changes I would make to the architecture: 
		1) I would keep having separate view models, but add a build method in each of them, deprecating the view model builders - the reason for this is because I personally would only use the builder pattern if you could build an object with different combinations of properties (view models right now are built the same way without any variance, so right now every view model has one view model builder, with one build method). You could argue about separation of concerns though, and a view model shouldn't know how to build itself, which I think this is a reasonable argument. You could have a view model builder/service, but I think this creates overhead that's not needed at this point - I would keep it simple for now, however if knowing future business requirements would signify that view models could be built with various parameters in different ways, then I would architect the view model builders from the start like it is now.
		2) I would deprecate commands and command handlers in order to remove a lot of overhead. You could simply just have a service that controllers call into in order to build up view models, or handle processing. I would use the command pattern if you were going to process a series of commands, have rollback functionality, etc. Right now I don't think the architecture lends itself to having commands and command handlers for every business requirement. If I knew future business requirements would lend themselves to the command pattern then I'd architect the code how it is now.
	D) I would use a dependency injection framework.
	E) I would use a Unit Testing mocking framework for unit tests that needed mocking.
	F) I would consider setting up a Single Page Application to handle client side logic, and to improve application performance in the future, especially when there will be potentially many users.
	G) I would consider not using the built in .NET users/roles tables but creating my own to house everything in one database that is not local but hosted remotely (perhaps on Azure).

3) Things I like about the code
	A) I like how modular the code it is - whoever set it up seems to have a lot of experience with coding and thinking about architectures.
	B) I like how Entity Framework Code First is being used.
	C) I like how unit testing is being done already.
